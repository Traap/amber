#!/bin/bash
# ------------------------------------------------------------------------------
# This script is used to create an amber factory test plan, test suite, or
# test case folder and file.
# ------------------------------------------------------------------------------

# These flags enable optional features.
factoryFlag=0 # Create a new amber test factory. 
planFlag=0    # Create a new amber test plan folder and file.
suiteFlag=0   # Create a new amber test suite folder and file.
caseFlag=0    # Create a new amber test case folder and file.
errorFlag=0;  # A parseOptions error occured.
helpFlag=1;   # Show help.
debugFlag=0;  # Show parameters when set but do not create files.

# ------------------------------------------------------------------------------
# Orchestrate the show.
# ------------------------------------------------------------------------------
main() {
  parseOptions $@
  if [ $helpFlag == 1 -o $errorFlag == 1 ]; then
    showHelp
  else
    # Save current working directory.
    cwd=$(pwd)

    # Move to AMBERPATH
    cd ${AMBERPATH}

    # Process the requests.
    if [ $factoryFlag == 1 ]; then
      newFactory
    fi 
    if [ $planFlag == 1 ]; then
      newPlan
    fi 
    if [ $suiteFlag == 1 ]; then
      newSuite
    fi
    if [ $caseFlag == 1 ]; then
      newCase
    fi

    # Return to saved working directory.
    cd ${cwd}
  fi
}

# ------------------------------------------------------------------------------
# Show the help text for the script and then terminate execution.
# ------------------------------------------------------------------------------
function showHelp {
   echo
   echo "Usage: newfactoryitem [OPTIONS]"
   echo "Run newfactory to create a new amber application folder and file."
   echo
   echo "OPTIONS"
   echo "  --factory=path/to/dir      Tell amber where to create the factory."
   echo ""
   echo "  --plan=name                Test plan name to create."
   echo
   echo "  --suite=name               Test suite name to create."
   echo 
   echo "  --case=name                Test case name to create."
   echo
   echo "  --help                      Display this help message."
   echo
   checkForAmberPath
}

# ------------------------------------------------------------------------------
# Parse the command line options.   If the help flag is encountered, or if the
# command line option is not recognized, then display the help information and
# terminate gracefully.
#
# Arguments:
# A non-empty array containing the command line options.
# ------------------------------------------------------------------------------
function parseOptions {
    # Iterate through the list of options.
    for var in "$@"
    do
      case $var in
        --debug)
          debugFlag=1
          shift
          ;;
        --factory=*)
          FACTORY="${var#*=}"
          helpFlag=0
          factoryFlag=1
          shift
          ;;
        --plan=*)
          PLAN="${var#*=}"
          helpFlag=0
          planFlag=1
          shift
          ;;
        --suite=*)
          SUITE="${var#*=}"
          suiteFlag=1
          helpFlag=0
          shift
          ;;
        --case=*)
          CASE="${var#*=}"
          caseFlag=1
          helpFlag=0
          shift
          ;;
        --help)
          helpFlag=1
          ;;
        *)
          echo "Unknown argument $var"
          echo
          errorFlag=1
          ;;
      esac
    done
}

# ------------------------------------------------------------------------------
# Create a new test factory. 
# ------------------------------------------------------------------------------
newFactory() {
  factoryDir=''"${cwd}"'/'"${FACTORY}"''/factory
  msg "Creating document directory ${factoryDir}"
  mkdir -p ${factoryDir}
}

# ------------------------------------------------------------------------------
# Create a new test plan. 
# ------------------------------------------------------------------------------
newPlan() {
  newFile "plan" $PLAN
}

# ------------------------------------------------------------------------------
# Create a new test suite. 
# ------------------------------------------------------------------------------
newSuite() {
  newFile "suite" $SUITE
}

# ------------------------------------------------------------------------------
# Create a new test case. 
# ------------------------------------------------------------------------------
newCase() {
  newFile "case" $CASE
}

# ------------------------------------------------------------------------------
# newFile 
# $1 plan, suite or case
# $2 filename of plan, suite or case
# ------------------------------------------------------------------------------
newFile() {

  tofDir=''"${factoryDir}"'/'"$1"'/'"$2"''
  fn=$(basename -- "${tofDir}/$2.yaml")
  filename=${fn##*/}

  if [ $debugFlag == 0 ]; then
    if [[ -d ${factoryDir} ]]; then
      # Don't overwrite an existing file.
      if [ ! -f "${tofDir}/${filename}" ]; then
        msg "Creating amber test case ${tofDir}/${filename}"
        mkdir -pv ${tofDir}
        cp -v ${AMBERPATH}/data/new$1.yaml ${tofDir}/${filename}
      fi
    else
      msg "Aborting because a factory folder is missing."
    fi
  else
    debugMode
  fi
}


# ------------------------------------------------------------------------------
# check for AMBERPATH 
# ------------------------------------------------------------------------------
checkForAmberPath() {
  if [ ! -d ${AMBERPATH} ]; then
    msg "AMBERPATH [${AMBERPATH}] must be defined.  Aborting!"
    exit
  fi
}

# ------------------------------------------------------------------------------
# msg is used to format strings to the console. 
# ------------------------------------------------------------------------------
msg() {
  echo ""
  echo $1
}

# ------------------------------------------------------------------------------
# debugMode shows the user what would happen when the command is run without
# the --debug flag.
# ------------------------------------------------------------------------------
debugMode() {
  echo "Debug mode."
  echo "   factoryDir [${factoryDir}]"
  echo "       tofDir [${tofDir}]"
  echo "     filename [${filename}]"
  echo "full filename [${factoryDir}/${filename}]"
}

# ------------------------------------------------------------------------------
# Kick start this script.
# ------------------------------------------------------------------------------
main $@
